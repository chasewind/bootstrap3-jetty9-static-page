



属性选择器
[attribute]			用于选取带有指定属性的元素。
[attribute=value]	用于选取带有指定属性和值的元素。
[attribute~=value]	用于选取属性值中包含指定词汇的元素。
[attribute|=value]	用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。
[attribute^=value]	匹配属性值以指定值开头的每个元素。
[attribute$=value]	匹配属性值以指定值结尾的每个元素。
[attribute*=value]	匹配属性值中包含指定值的每个元素。



background-repeat: repeat-y;
属性值 repeat 导致图像在水平垂直方向上都平铺，就像以往背景图像的通常做法一样。
repeat-x 和 repeat-y 分别导致图像只在水平或垂直方向上重复，no-repeat 则不允许图像在任何方向上平铺。




背景定位	 background-position:center	
单一关键字		等价的关键字
center		center center
top	top 	center 或 center top
bottom		bottom center 或 center bottom
right		right center 或 center right
left		left center 或 center left
----------------------组合--------------------------------------------------------
top left				如果您仅规定了一个关键词，那么第二个值将是"center"。默认值：0% 0%。
top center
top right
center left
center center
center right
bottom left
bottom center
bottom right

x% y%			第一个值是水平位置，第二个值是垂直位置。左上角是 0% 0%。右下角是 100% 100%。如果您仅规定了一个值，另一个值将是 50%。
xpos ypos		第一个值是水平位置，第二个值是垂直位置。左上角是 0 0。单位是像素 (0px 0px) 或任何其他的 CSS 单位。如果您仅规定了一个值，另一个值将是50%。您可以混合使用 % 和 position 值。
----------------------------------------------------------------------------------


背景关联
如果文档比较长，那么当文档向下滚动时，背景图像也会随之滚动。当文档滚动到超过图像的位置时，图像就会消失。
您可以通过 background-attachment 属性防止这种滚动。通过这个属性，可以声明图像相对于可视区是固定的（fixed），因此不会受到滚动的影响
background-attachment 属性的默认值是 scroll，也就是说，在默认的情况下，背景会随文档滚动。


background 简写属性在一个声明中设置所有的背景属性。
可以设置如下属性：
background-color
background-position
background-size
background-repeat
background-origin
background-clip
background-attachment
background-image

首行缩进
p {text-indent: 5em;}
p {text-indent: 20%;}



h1 {text-align:center}
h2 {text-align:left}
h3 {text-align:right}
值	描述
left	把文本排列到左边。默认值：由浏览器决定。
right	把文本排列到右边。
center	把文本排列到中间。
justify	实现两端对齐文本效果。
inherit	规定应该从父元素继承 text-align 属性的值。



word-spacing 属性可以改变字（单词）之间的标准间隔。其默认值 normal 与设置值为 0 是一样的。
word-spacing 属性接受一个正长度值或负长度值。如果提供一个正长度值，那么字之间的间隔就会增加。为 word-spacing 设置一个负值，会把它拉近：



h1 {text-transform:uppercase}
h2 {text-transform:capitalize}
p {text-transform:lowercase}

值	描述
none	默认。定义带有小写字母和大写字母的标准的文本。
capitalize	文本中的每个单词以大写字母开头。
uppercase	定义仅有大写字母。
lowercase	定义无大写字母，仅有小写字母。
inherit	规定应该从父元素继承 text-transform 属性的值。


text-decoration 有 5 个值：
none
underline
overline
line-through
blink

font-style 属性最常用于规定斜体文本。
该属性有三个值：
normal - 文本正常显示
italic - 文本斜体显示
oblique - 文本倾斜显示


p.normal {font-weight:normal;}
p.thick {font-weight:bold;}
p.thicker {font-weight:900;}

normal		默认值。定义标准的字符。
bold		定义粗体字符。
bolder		定义更粗的字符。
lighter		定义更细的字符。
100到900		定义由粗到细的字符。400 等同于 normal，而 700 等同于 bold。
inherit		规定应该从父元素继承字体的粗细。


h1 {font-size:60px;}
h2 {font-size:40px;}
p {font-size:14px;}
W3C 推荐使用 em 尺寸单位。
1em 等于当前的字体尺寸。如果一个元素的 font-size 为 16 像素，那么对于该元素，1em 就等于 16 像素。在设置字体大小时，em 的值会相对于父元素的字体大小改变。
浏览器中默认的文本大小是 16 像素。因此 1em 的默认尺寸是 16 像素。
可以使用下面这个公式将像素转换为 em：pixels/16=em


a:link {color:#FF0000;}		/* 未被访问的链接 */
a:visited {color:#00FF00;}	/* 已被访问的链接 */
a:hover {color:#FF00FF;}	/* 鼠标指针移动到链接上 */
a:active {color:#0000FF;}	/* 正在被点击的链接 */

当为链接的不同状态设置样式时，请按照以下次序规则：
a:hover 必须位于 a:link 和 a:visited 之后
a:active 必须位于 a:hover 之后

a:link {text-decoration:none;}
a:visited {text-decoration:none;}
a:hover {text-decoration:underline;}
a:active {text-decoration:underline;}

a:link {background-color:#B2FF99;}
a:visited {background-color:#FFFF85;}
a:hover {background-color:#FF704D;}
a:active {background-color:#FF704D;}



ul {list-style-type : square}
ul.circle {list-style-type:circle;}
ul.square {list-style-type:square;}
ol.upper-roman {list-style-type:upper-roman;}
ol.lower-alpha {list-style-type:lower-alpha;}
值						描述
none					无标记。
disc					默认。标记是实心圆。
circle					标记是空心圆。
square					标记是实心方块。
decimal					标记是数字。
decimal-leading-zero	0开头的数字标记。(01, 02, 03, 等。)
lower-roman				小写罗马数字(i, ii, iii, iv, v, 等。)
upper-roman				大写罗马数字(I, II, III, IV, V, 等。)
lower-alpha				小写英文字母The marker is lower-alpha (a, b, c, d, e, 等。)
upper-alpha				大写英文字母The marker is upper-alpha (A, B, C, D, E, 等。)
lower-greek				小写希腊字母(alpha, beta, gamma, 等。)
lower-latin				小写拉丁字母(a, b, c, d, e, 等。)
upper-latin				大写拉丁字母(A, B, C, D, E, 等。)
hebrew					传统的希伯来编号方式
armenian				传统的亚美尼亚编号方式
georgian				传统的乔治亚编号方式(an, ban, gan, 等。)
cjk-ideographic			简单的表意数字
hiragana				标记是：a, i, u, e, o, ka, ki, 等。（日文片假名）
katakana				标记是：A, I, U, E, O, KA, KI, 等。（日文片假名）
hiragana-iroha			标记是：i, ro, ha, ni, ho, he, to, 等。（日文片假名）
katakana-iroha			标记是：I, RO, HA, NI, HO, HE, TO, 等。（日文片假名）



ul li {list-style-image : url(xxx.gif)}

ul{list-style-position:inside;}

值			描述
inside		列表项目标记放置在文本以内，且环绕文本根据标记对齐。
outside		默认值。保持标记位于文本的左侧。列表项目标记放置在文本以外，且环绕文本不根据标记对齐。
inherit		规定应该从父元素继承 list-style-position 属性的值。


list-style 简写属性在一个声明中设置所有的列表属性。
说明
该属性是一个简写属性，涵盖了所有其他列表样式属性。由于它应用到所有 display 为 list-item 的元素，所以在普通的 HTML 和 XHTML 中只能用于 li 元素，不过实际上它可以应用到任何元素，并由 list-item 元素继承。
可以按顺序设置如下属性：
list-style-type
list-style-position
list-style-image


//下面显示的框是双线条边框
table, th, td{
  border: 1px solid blue;
}

border-collapse 属性设置是否将表格边框折叠为单一边框：

table{
  border-collapse:collapse;
}



text-align 和 vertical-align 属性设置表格中文本的对齐方式。
text-align 属性设置水平对齐方式，比如左对齐、右对齐或者居中：
vertical-align 属性设置垂直对齐方式，比如顶部对齐、底部对齐或居中对齐：


border-collapse	设置是否把表格边框合并为单一的边框。
border-spacing	设置分隔单元格边框的距离。
caption-side	设置表格标题的位置。
empty-cells	设置是否显示表格中的空单元格。
table-layout	设置显示单元、行和列的算法。




css 轮廓
属性				描述	 
outline			在一个声明中设置所有的轮廓属性。 
outline-color	设置轮廓的颜色。 
outline-style	设置轮廓的样式。 
outline-width	设置轮廓的宽度。 


p{
  outline-style:dotted;
}
值		描述
none	默认。定义无轮廓。
dotted	定义点状的轮廓。
dashed	定义虚线轮廓。
solid	定义实线轮廓。
double	定义双线轮廓。双线的宽度等同于 outline-width 的值。
groove	定义 3D 凹槽轮廓。此效果取决于 outline-color 值。
ridge	定义 3D 凸槽轮廓。此效果取决于 outline-color 值。
inset	定义 3D 凹边轮廓。此效果取决于 outline-color 值。
outset	定义 3D 凸边轮廓。此效果取决于 outline-color 值。
inherit	规定应该从父元素继承轮廓样式的设置。








p.inline{
  display:inline;
}

值					描述
none				此元素不会被显示。
block				此元素将显示为块级元素，此元素前后会带有换行符。
inline				默认。此元素会被显示为内联元素，元素前后没有换行符。
inline-block		行内块元素。（CSS2.1 新增的值）
list-item			此元素会作为列表显示。
run-in				此元素会根据上下文作为块级元素或内联元素显示。
compact				CSS 中有值 compact，不过由于缺乏广泛支持，已经从 CSS2.1 中删除。
marker				CSS 中有值 marker，不过由于缺乏广泛支持，已经从 CSS2.1 中删除。
table				此元素会作为块级表格来显示（类似 <table>），表格前后带有换行符。
inline-table		此元素会作为内联表格来显示（类似 <table>），表格前后没有换行符。
table-row-group		此元素会作为一个或多个行的分组来显示（类似 <tbody>）。
table-header-group	此元素会作为一个或多个行的分组来显示（类似 <thead>）。
table-footer-group	此元素会作为一个或多个行的分组来显示（类似 <tfoot>）。
table-row			此元素会作为一个表格行显示（类似 <tr>）。
table-column-group	此元素会作为一个或多个列的分组来显示（类似 <colgroup>）。
table-column		此元素会作为一个单元格列显示（类似 <col>）
table-cell			此元素会作为一个表格单元格显示（类似 <td> 和 <th>）
table-caption		此元素会作为一个表格标题显示（类似 <caption>）
inherit				规定应该从父元素继承 display 属性的值。




通过使用 position 属性，我们可以选择 4 种不同类型的定位，这会影响元素框生成的方式。
position 属性值的含义：
static
元素框正常生成。块级元素生成一个矩形框，作为文档流的一部分，行内元素则会创建一个或多个行框，置于其父元素中。
relative
元素框偏移某个距离。元素仍保持其未定位前的形状，它原本所占的空间仍保留。
absolute
元素框从文档流完全删除，并相对于其包含块定位。包含块可能是文档中的另一个元素或者是初始包含块。元素原先在正常文档流中所占的空间会关闭，就好像元素原来不存在一样。元素定位后生成一个块级框，而不论原来它在正常流中生成何种类型的框。
fixed
元素框的表现类似于将 position 设置为 absolute，不过其包含块是视窗本身。
提示：相对定位实际上被看作普通流定位模型的一部分，因为元素的位置相对于它




CSS 相对定位
相对定位是一个非常容易掌握的概念。如果对一个元素进行相对定位，它将出现在它所在的位置上。然后，可以通过设置垂直或水平位置，让这个元素“相对于”它的起点进行移动。
如果将 top 设置为 20px，那么框将在原位置顶部下面 20 像素的地方。如果 left 设置为 30 像素，那么会在元素左边创建 30 像素的空间，也就是将元素向右移动。
在使用相对定位时，无论是否进行移动，元素仍然占据原来的空间。因此，移动元素会导致它覆盖其它框
在使用相对定位时，无论元素是否移动，元素在文档流中占据原来空间，只是表现会改变。



CSS 绝对定位
绝对定位使元素的位置与文档流无关，因此不占据空间。这一点与相对定位不同，相对定位实际上被看作普通流定位模型的一部分，因为元素的位置相对于它在普通流中的位置。
普通流中其它元素的布局就像绝对定位的元素不存在一样：
绝对定位的元素的位置相对于最近的已定位祖先元素，如果元素没有已定位的祖先元素，那么它的位置相对于最初的包含块。
对于定位的主要问题是要记住每种定位的意义。所以，现在让我们复习一下学过的知识吧：相对定位是“相对于”元素在文档中的初始位置，而绝对定位是“相对于”最近的已定位祖先元素，如果不存在已定位的祖先元素，那么“相对于”最初的包含块。

绝对定位与文档流无关，所以绝对定位的元素可以覆盖页面上的其他元素，可以通过z-index属性控制叠放顺序，z-index越高，元素位置越靠上。


img{
  float:left;
  clear:both;
}


值		描述
left	在左侧不允许浮动元素。
right	在右侧不允许浮动元素。
both	在左右两侧均不允许浮动元素。
none	默认值。允许浮动元素出现在两侧。
inherit	规定应该从父元素继承 clear 属性的值。




如果需要选择紧接在	 另一个 	元素后的元素，而且二者有相同的父元素，可以使用相邻兄弟选择器（Adjacent sibling selector）

例如，如果要增加紧接在 h1 元素后出现的段落的上边距，可以这样写：
h1 + p {margin-top:50px;}


li + li {color:red;}
ul li:first-child{color:green;}



下面的属性可应用于 "first-line" 伪元素：
font
color
background
word-spacing
letter-spacing
text-decoration
vertical-align
text-transform
line-height
clear



下面的属性可应用于 "first-letter" 伪元素：
font
color
background
margin
padding
border
text-decoration
vertical-align (仅当 float 为 none 时)
text-transform
line-height
float
clear





使用 margin 属性来水平对齐
.center
{
margin-left:auto;
margin-right:auto;
width:70%;
background-color:#b0e0e6;
}
使用 position 属性进行左和右对齐
.right
{
position:absolute;
right:0px;
width:300px;
background-color:#b0e0e6;
}

使用 float 属性来进行左和右对齐
.right
{
float:right;
width:300px;
background-color:#b0e0e6;
}



图片居中
添加span元素或者P元素包裹




图片透明度
img
{
	opacity:0.4;
	filter:alpha(opacity=40); /* For IE8 and earlier */
}
img:hover
{
	opacity:1.0;
	filter:alpha(opacity=100); /* For IE8 and earlier */
}




@media screen{
	p.test {font-family:verdana,sans-serif; font-size:14px}
}

@media print{
	p.test {font-family:times,serif; font-size:10px}
}

@media screen,print{
	p.test {font-weight:bold}
}

媒介类型		描述
all			用于所有的媒介设备。
aural		用于语音和音频合成器。
braille		用于盲人用点字法触觉回馈设备。
embossed	用于分页的盲人用点字法打印机。
handheld	用于小的手持的设备。
print		用于打印机。
projection	用于方案展示，比如幻灯片。
screen		用于电脑显示器。
tty			用于使用固定密度字母栅格的媒介，比如电传打字机和终端。
tv			用于电视机类型的设备。








